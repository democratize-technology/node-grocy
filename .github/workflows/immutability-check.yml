name: Immutability Check

on:
  push:
    branches: [ main, feature/v1-refactoring ]
  pull_request:
    branches: [ main, feature/v1-refactoring ]

jobs:
  immutability:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        # Install ESLint and functional programming plugins if not present
        npm list eslint || npm install --save-dev eslint@latest
        npm list eslint-plugin-functional || npm install --save-dev eslint-plugin-functional@latest
        npm list @typescript-eslint/parser || npm install --save-dev @typescript-eslint/parser@latest
        npm list @typescript-eslint/eslint-plugin || npm install --save-dev @typescript-eslint/eslint-plugin@latest

    - name: Setup ESLint for Immutability
      run: |
        # Create ESLint flat config for ESLint 9.x compatibility
        cat > eslint.config.immutability.mjs << 'EOF'
        import functional from 'eslint-plugin-functional';
        
        export default [
          {
            languageOptions: {
              ecmaVersion: 2022,
              sourceType: 'module',
              globals: {
                console: 'readonly',
                process: 'readonly',
                Buffer: 'readonly',
                __dirname: 'readonly',
                __filename: 'readonly',
                global: 'readonly',
                require: 'readonly',
                module: 'readonly',
                exports: 'readonly'
              }
            },
            plugins: {
              functional
            },
            rules: {
              'functional/immutable-data': 'error',
              'functional/no-let': 'error', 
              'no-var': 'error',
              'prefer-const': 'error'
            }
          },
          {
            files: ['*.test.js', '*.test.mjs', '**/*.test.*'],
            rules: {
              'functional/immutable-data': 'off',
              'functional/no-let': 'off'
            }
          }
        ];
        EOF

    - name: Run Immutability Check
      run: |
        echo "üö® CRITICAL: Checking for mutations - node-grocy v1.0.0 MUST be immutable"
        echo "=============================================================="
        
        # Check current JavaScript files for mutations
        echo "Checking for .mjs and .js files..."
        find . -maxdepth 1 -name "*.mjs" -o -name "*.js" | head -5
        
        # Run ESLint on .mjs files (which we know exist)
        if ls *.mjs 1> /dev/null 2>&1; then
          echo "Running immutability check on .mjs files..."
          npx eslint --config eslint.config.immutability.mjs index.mjs --format=stylish
        else
          echo "‚úÖ No .mjs files found to check"
        fi
        
        if [ $? -ne 0 ]; then
          echo ""
          echo "‚ùå IMMUTABILITY VIOLATIONS DETECTED!"
          echo "All code in node-grocy v1.0.0 MUST be immutable."
          echo "Fix these violations before merging:"
          echo "  ‚Ä¢ Use const instead of let/var"
          echo "  ‚Ä¢ Use spread operator for object updates: {...obj, newProp}"
          echo "  ‚Ä¢ Use array methods like concat, filter, map instead of push, pop"
          echo "  ‚Ä¢ Mark function parameters as Readonly<T>"
          echo ""
          echo "See CLAUDE.md for immutability guidelines."
          exit 1
        fi
        
        echo "‚úÖ All files pass immutability checks!"

    - name: Check for Mutation Keywords
      run: |
        echo "Scanning for common mutation patterns..."
        
        # Scan for dangerous mutation patterns
        VIOLATIONS=$(grep -n -E "(\.push\(|\.pop\(|\.shift\(|\.unshift\(|\.splice\(|\.sort\(|\.reverse\()" *.mjs *.js 2>/dev/null || true)
        
        if [ ! -z "$VIOLATIONS" ]; then
          echo "‚ùå MUTATION METHODS DETECTED:"
          echo "$VIOLATIONS"
          echo ""
          echo "Replace with immutable alternatives:"
          echo "  ‚Ä¢ array.push(item) ‚Üí [...array, item]"
          echo "  ‚Ä¢ array.pop() ‚Üí array.slice(0, -1)"
          echo "  ‚Ä¢ array.sort() ‚Üí [...array].sort()"
          exit 1
        fi
        
        echo "‚úÖ No mutation methods found!"

    - name: Validate Object Mutations
      run: |
        echo "Checking for direct object mutations..."
        
        # Look for direct property assignments (basic pattern)
        ASSIGNMENTS=$(grep -n -E "^\s*[a-zA-Z_$][a-zA-Z0-9_$]*\.[a-zA-Z_$][a-zA-Z0-9_$]*\s*=" *.mjs *.js 2>/dev/null | grep -v "module.exports" | grep -v "// eslint-disable" || true)
        
        if [ ! -z "$ASSIGNMENTS" ]; then
          echo "‚ö†Ô∏è  POTENTIAL OBJECT MUTATIONS DETECTED:"
          echo "$ASSIGNMENTS"
          echo ""
          echo "Verify these are not mutations. Use spread operator for updates:"
          echo "  ‚Ä¢ obj.prop = val ‚Üí obj = {...obj, prop: val}"
        fi
        
        echo "‚úÖ Object mutation check completed!"

    - name: Generate Immutability Report
      run: |
        echo "# Immutability Check Report" > immutability-report.md
        echo "Generated on: $(date)" >> immutability-report.md
        echo "" >> immutability-report.md
        echo "## Summary" >> immutability-report.md
        echo "- ‚úÖ ESLint functional rules: PASSED" >> immutability-report.md
        echo "- ‚úÖ Mutation method scan: PASSED" >> immutability-report.md
        echo "- ‚úÖ Object mutation scan: PASSED" >> immutability-report.md
        echo "" >> immutability-report.md
        echo "## Files Checked" >> immutability-report.md
        find . -name "*.mjs" -o -name "*.js" | grep -v node_modules | sort >> immutability-report.md
        
        echo "‚úÖ Immutability report generated!"

    - name: Upload Immutability Report
      uses: actions/upload-artifact@v4
      with:
        name: immutability-report
        path: immutability-report.md
        retention-days: 30