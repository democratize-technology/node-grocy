name: API Compatibility Check

on:
  pull_request:
    branches: [ feature/v1-refactoring ]
    paths:
      - 'index.mjs'
      - 'src/**/*.ts'
      - 'src/**/*.js'
      - 'package.json'

permissions:
  contents: read
  pull-requests: write

jobs:
  api-compatibility:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for comparison

    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        # Install API analysis tools
        npm list jsdoc || npm install --save-dev jsdoc@latest
        npm list @apidevtools/json-schema-ref-parser || npm install --save-dev @apidevtools/json-schema-ref-parser@latest

    - name: Extract Current API Surface
      run: |
        set -euo pipefail
        echo "🔍 Extracting current API surface from codebase..."
        
        # Create API extraction script
        cat > extract-api.mjs << 'EOF'
        import fs from 'fs';
        import path from 'path';
        
        // Extract exports from index.mjs
        function extractExports(filePath) {
          if (!fs.existsSync(filePath)) return [];
          
          const content = fs.readFileSync(filePath, 'utf8');
          const exports = [];
          
          // Find class definitions
          const classMatches = content.match(/class\s+(\w+)/g);
          if (classMatches) {
            classMatches.forEach(match => {
              const className = match.replace('class ', '');
              exports.push({ type: 'class', name: className });
            });
          }
          
          // Find function definitions
          const functionMatches = content.match(/(?:function\s+|const\s+\w+\s*=\s*(?:async\s+)?function|(?:async\s+)?function\s+)(\w+)/g);
          if (functionMatches) {
            functionMatches.forEach(match => {
              const funcName = match.replace(/(?:function\s+|const\s+|=\s*(?:async\s+)?function|(?:async\s+)?function\s+)/g, '');
              if (funcName && !funcName.includes('(')) {
                exports.push({ type: 'function', name: funcName });
              }
            });
          }
          
          // Find method definitions (simplified)
          const methodMatches = content.match(/(\w+)\s*\([^)]*\)\s*{/g);
          if (methodMatches) {
            methodMatches.forEach(match => {
              const methodName = match.replace(/\s*\([^)]*\)\s*{/, '');
              if (methodName && !methodName.includes(' ') && methodName !== 'constructor') {
                exports.push({ type: 'method', name: methodName });
              }
            });
          }
          
          return exports;
        }
        
        // Extract API from main file
        const currentAPI = extractExports('index.mjs');
        
        // Also check src directory if it exists
        if (fs.existsSync('src')) {
          const srcFiles = fs.readdirSync('src', { recursive: true })
            .filter(file => file.endsWith('.js') || file.endsWith('.ts'))
            .map(file => path.join('src', file));
          
          srcFiles.forEach(file => {
            const srcAPI = extractExports(file);
            currentAPI.push(...srcAPI.map(api => ({ ...api, source: file })));
          });
        }
        
        // Remove duplicates and sort
        const uniqueAPI = currentAPI.filter((api, index, self) => 
          index === self.findIndex(a => a.type === api.type && a.name === api.name)
        ).sort((a, b) => a.name.localeCompare(b.name));
        
        // Save current API
        fs.writeFileSync('current-api.json', JSON.stringify(uniqueAPI, null, 2));
        
        console.log(`Extracted ${uniqueAPI.length} API elements`);
        console.log('API elements:', uniqueAPI.map(api => `${api.type}: ${api.name}`).join(', '));
        EOF
        
        node extract-api.mjs

    - name: Get Base Branch API
      run: |
        set -euo pipefail
        echo "📥 Getting base branch API for comparison..."
        
        # Checkout base branch
        git fetch origin ${{ github.base_ref }}
        git checkout origin/${{ github.base_ref }}
        
        # Extract base API
        node extract-api.mjs
        mv current-api.json base-api.json
        
        # Return to PR branch
        git checkout ${{ github.sha }}
        
        echo "Base API extracted successfully"

    - name: Compare API Compatibility
      run: |
        set -euo pipefail
        echo "🔍 Comparing API compatibility..."
        
        # Create comparison script
        cat > compare-api.mjs << 'EOF'
        import fs from 'fs';
        
        function loadAPI(file) {
          if (!fs.existsSync(file)) return [];
          return JSON.parse(fs.readFileSync(file, 'utf8'));
        }
        
        const baseAPI = loadAPI('base-api.json');
        const currentAPI = loadAPI('current-api.json');
        
        // Find breaking changes
        const removedAPI = baseAPI.filter(base => 
          !currentAPI.find(current => 
            current.type === base.type && current.name === base.name
          )
        );
        
        // Find new additions
        const addedAPI = currentAPI.filter(current => 
          !baseAPI.find(base => 
            base.type === current.type && base.name === current.name
          )
        );
        
        // Find preserved API
        const preservedAPI = baseAPI.filter(base => 
          currentAPI.find(current => 
            current.type === base.type && current.name === base.name
          )
        );
        
        const results = {
          removed: removedAPI,
          added: addedAPI,
          preserved: preservedAPI,
          breaking: removedAPI.length > 0,
          compatible: removedAPI.length === 0
        };
        
        fs.writeFileSync('api-comparison.json', JSON.stringify(results, null, 2));
        
        console.log('API Comparison Results:');
        console.log(`- Removed: ${removedAPI.length}`);
        console.log(`- Added: ${addedAPI.length}`);
        console.log(`- Preserved: ${preservedAPI.length}`);
        console.log(`- Breaking: ${results.breaking ? 'YES' : 'NO'}`);
        
        if (removedAPI.length > 0) {
          console.log('\nRemoved API elements:');
          removedAPI.forEach(api => console.log(`  - ${api.type}: ${api.name}`));
        }
        
        if (addedAPI.length > 0) {
          console.log('\nAdded API elements:');
          addedAPI.forEach(api => console.log(`  + ${api.type}: ${api.name}`));
        }
        EOF
        
        node compare-api.mjs

    - name: Check for Breaking Changes
      run: |
        set -euo pipefail
        echo "🚨 Checking for breaking changes..."
        
        # Read comparison results  
        BREAKING=$(jq -r '.breaking' api-comparison.json)
        
        if [ "$BREAKING" = "true" ]; then
          echo "❌ BREAKING CHANGES DETECTED!"
          echo ""
          echo "The following API elements have been removed:"
          jq -r '.removed[] | "  - " + .type + ": " + .name' api-comparison.json
          echo ""
          echo "This is a BREAKING CHANGE for v1.0.0 migration."
          echo "Either:"
          echo "1. Restore the removed API elements"
          echo "2. Provide backward compatibility wrappers"
          echo "3. Document the breaking change in MIGRATION.md"
          echo ""
          echo "BREAKING_CHANGES=true" >> $GITHUB_ENV
        else
          echo "✅ No breaking changes detected!"
          echo "BREAKING_CHANGES=false" >> $GITHUB_ENV
        fi

    - name: Generate Compatibility Report
      run: |
        echo "📋 Generating API compatibility report..."
        
        cat > api-compatibility-report.md << 'EOF'
        # API Compatibility Report
        
        Generated on: $(date)
        PR: #${{ github.event.pull_request.number }}
        Base: ${{ github.base_ref }}
        Head: ${{ github.head_ref }}
        
        ## Summary
        
        EOF
        
        # Add summary from comparison
        echo "| Metric | Count |" >> api-compatibility-report.md
        echo "|--------|-------|" >> api-compatibility-report.md
        echo "| **Preserved API** | $(jq '.preserved | length' api-comparison.json) |" >> api-compatibility-report.md
        echo "| **Added API** | $(jq '.added | length' api-comparison.json) |" >> api-compatibility-report.md
        echo "| **Removed API** | $(jq '.removed | length' api-comparison.json) |" >> api-compatibility-report.md
        echo "| **Breaking Changes** | $(jq -r 'if .breaking then "❌ YES" else "✅ NO" end' api-comparison.json) |" >> api-compatibility-report.md
        echo "" >> api-compatibility-report.md
        
        # Add compatibility status
        if [ "${{ env.BREAKING_CHANGES }}" = "true" ]; then
          echo "🚨 **Status**: BREAKING CHANGES DETECTED" >> api-compatibility-report.md
          echo "" >> api-compatibility-report.md
          echo "This PR introduces breaking changes to the public API." >> api-compatibility-report.md
          echo "Review required before merging to v1.0.0." >> api-compatibility-report.md
        else
          echo "✅ **Status**: BACKWARD COMPATIBLE" >> api-compatibility-report.md
          echo "" >> api-compatibility-report.md
          echo "This PR maintains backward compatibility." >> api-compatibility-report.md
        fi
        
        echo "" >> api-compatibility-report.md
        echo "## Detailed Changes" >> api-compatibility-report.md
        echo "" >> api-compatibility-report.md
        
        # Add removed API section
        REMOVED_COUNT=$(jq '.removed | length' api-comparison.json)
        if [ $REMOVED_COUNT -gt 0 ]; then
          echo "### ❌ Removed API Elements" >> api-compatibility-report.md
          echo "" >> api-compatibility-report.md
          jq -r '.removed[] | "- **" + .type + "**: `" + .name + "`"' api-comparison.json >> api-compatibility-report.md
          echo "" >> api-compatibility-report.md
        fi
        
        # Add new API section
        ADDED_COUNT=$(jq '.added | length' api-comparison.json)
        if [ $ADDED_COUNT -gt 0 ]; then
          echo "### ✅ Added API Elements" >> api-compatibility-report.md
          echo "" >> api-compatibility-report.md
          jq -r '.added[] | "- **" + .type + "**: `" + .name + "`"' api-comparison.json >> api-compatibility-report.md
          echo "" >> api-compatibility-report.md
        fi
        
        echo "## Migration Guidance" >> api-compatibility-report.md
        echo "" >> api-compatibility-report.md
        if [ "${{ env.BREAKING_CHANGES }}" = "true" ]; then
          echo "⚠️  **This PR requires migration documentation:**" >> api-compatibility-report.md
          echo "" >> api-compatibility-report.md
          echo "1. Update MIGRATION.md with breaking changes" >> api-compatibility-report.md
          echo "2. Consider providing compatibility wrappers" >> api-compatibility-report.md
          echo "3. Update version to indicate breaking change" >> api-compatibility-report.md
          echo "4. Add deprecation warnings if appropriate" >> api-compatibility-report.md
        else
          echo "✅ **No migration required** - backward compatible" >> api-compatibility-report.md
        fi

    - name: Fail on Breaking Changes
      if: env.BREAKING_CHANGES == 'true'
      run: |
        echo "❌ WORKFLOW FAILED: Breaking changes detected"
        echo ""
        echo "This PR introduces breaking changes to the public API."
        echo "For node-grocy v1.0.0, breaking changes require:"
        echo ""
        echo "1. 📝 Documentation in MIGRATION.md"
        echo "2. 🔧 Backward compatibility wrappers (if possible)"
        echo "3. 🏷️  Proper semantic versioning"
        echo "4. 👥 Team review and approval"
        echo ""
        echo "See the API Compatibility Report for details."
        exit 1

    - name: Upload Compatibility Report
      uses: actions/upload-artifact@v4
      with:
        name: api-compatibility-report
        path: |
          api-compatibility-report.md
          api-comparison.json
          current-api.json
          base-api.json
        retention-days: 30

    - name: Comment on PR
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          const data = JSON.parse(fs.readFileSync('api-comparison.json', 'utf8'));
          const breaking = '${{ env.BREAKING_CHANGES }}' === 'true';
          
          let comment = `## 🔍 API Compatibility Check\n\n`;
          
          if (breaking) {
            comment += `❌ **BREAKING CHANGES DETECTED**\n\n`;
          } else {
            comment += `✅ **BACKWARD COMPATIBLE**\n\n`;
          }
          
          comment += `| Metric | Count |\n`;
          comment += `|--------|-------|\n`;
          comment += `| Preserved API | ${data.preserved.length} |\n`;
          comment += `| Added API | ${data.added.length} |\n`;
          comment += `| Removed API | ${data.removed.length} |\n`;
          comment += `| Breaking | ${breaking ? '❌ YES' : '✅ NO'} |\n\n`;
          
          if (data.removed.length > 0) {
            comment += `### ❌ Removed API Elements\n`;
            data.removed.forEach(api => {
              comment += `- **${api.type}**: \`${api.name}\`\n`;
            });
            comment += `\n`;
          }
          
          if (data.added.length > 0) {
            comment += `### ✅ Added API Elements\n`;
            data.added.forEach(api => {
              comment += `- **${api.type}**: \`${api.name}\`\n`;
            });
            comment += `\n`;
          }
          
          if (breaking) {
            comment += `### ⚠️ Action Required\n`;
            comment += `This PR introduces breaking changes. Please:\n`;
            comment += `1. Update MIGRATION.md with breaking changes\n`;
            comment += `2. Consider backward compatibility wrappers\n`;
            comment += `3. Get team approval for breaking changes\n\n`;
          }
          
          comment += `📊 [View detailed compatibility report](${context.payload.pull_request.html_url}/checks)\n\n`;
          comment += `---\n`;
          comment += `*This comment was automatically generated by the API Compatibility workflow*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

    - name: Cache API Data
      uses: actions/cache@v4
      with:
        path: |
          api-comparison.json
          current-api.json
        key: api-${{ runner.os }}-${{ github.sha }}
        restore-keys: |
          api-${{ runner.os }}-
